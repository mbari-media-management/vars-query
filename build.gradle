plugins {
  id 'application'
  id 'com.adarshr.test-logger' version '4.0.0' 
  id 'java'
  id 'org.beryx.jlink' version "3.0.1"
  id 'org.openjfx.javafxplugin' version "0.1.0"
  id "com.github.ben-manes.versions" version "0.51.0" 
//   id "org.javamodularity.moduleplugin" version "1.8.7" //BUGS in 1.6.0, 1.5.0 is ok
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "MBARI"
        url = uri("https://maven.pkg.github.com/mbari-org/maven")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
    
}

version = '1.0.0'

dependencies {
//   implementation 'com.fatboyindustrial.gson-javatime-serialisers:gson-javatime-serialisers:1.1.2'
  implementation 'com.google.code.gson:gson:2.10.1'
  implementation 'com.google.guava:guava:33.0.0-jre'
  implementation 'com.guigarage:sdkfx:0.3.0.jre21'
  implementation 'com.jfoenix:jfoenix:9.0.10'
  implementation 'com.squareup.okhttp3:logging-interceptor:3.14.2'
  implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
  implementation 'com.squareup.retrofit2:retrofit:2.9.0'
  implementation 'com.typesafe:config:1.4.3'
  implementation 'io.reactivex.rxjava3:rxjava:3.1.8'
  implementation 'org.bushe:eventbus:1.5'
  implementation 'org.fxmisc.easybind:easybind:1.0.3'
  implementation 'org.mbari:mbarix4j:2.0.5.jre11'
  implementation 'org.mbari.vcr4j:vcr4j-core:5.2.0'
  implementation 'org.mbari.vcr4j:vcr4j-sharktopoda:5.2.0'
  implementation 'org.slf4j:slf4j-api:2.0.12'
  runtimeOnly 'ch.qos.logback:logback-classic:1.4.14' // 1.3.0-alpha5 isn't working with Jansi
  runtimeOnly 'com.h2database:h2:1.4.200'
  runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc:12.6.0.jre11'
  runtimeOnly 'javax.servlet:javax.servlet-api:4.0.1' // needed by logback
  runtimeOnly 'net.sourceforge.jtds:jtds:1.3.1'
  runtimeOnly 'org.apache.derby:derby:10.15.2.0'
  runtimeOnly 'org.apache.derby:derbyclient:10.15.2.0'
  runtimeOnly 'org.apache.derby:derbynet:10.15.2.0'
  runtimeOnly 'org.apache.derby:derbyshared:10.15.2.0'
  runtimeOnly 'org.apache.derby:derbytools:10.15.2.0'
  runtimeOnly 'org.postgresql:postgresql:42.7.1'
  testImplementation 'junit:junit:4.13.2'

  runtimeOnly 'com.oracle.database.jdbc:ojdbc11:21.1.0.0'

  implementation('org.jfxtras:jfxtras-controls:17-r1') {
    exclude group: 'org.openjfx', module: 'javafx-base'
    exclude group: 'org.openjfx', module: 'javafx-controls'
    exclude group: 'org.openjfx', module: 'javafx-graphics'
    because("If not excluded we end up with both mac and linux javafx jars which cause jlink to fail")
  }

  implementation('org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.8') {
      exclude module: "javax.persistence"
  }
}

javafx {
    version = "21.0.1"
    modules = [
            'javafx.base',
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics'
    ]
}

def runtimeJvmArgs = [
        '-Xms1g',
        '--add-opens', 'java.base/java.lang.invoke=retrofit2',
        "--add-opens",  "java.base/java.lang.invoke=vars.query.merged.module",
        '--add-reads', 'vars.query.merged.module=org.slf4j',
        '--add-reads', 'vars.query.merged.module=com.google.gson'
        // '--add-reads', 'vars.query.merged.module=org.slf4j'
]

def confEnvParams = [
  "ANNOSAURUS_JDBC_DRIVER",
  "ANNOSAURUS_JDBC_PASSWORD",
  "ANNOSAURUS_JDBC_URL",
  "ANNOSAURUS_JDBC_USER",
  "CONCEPT_SERVICE_TIMEOUT",
  "CONCEPT_SERVICE_URL",
  "SHARKTOPODA_PORT",
  "VARS_QUERY_ANNOTATION_START_DATE",
  "VARS_QUERY_FRAME_TITLE"
]
confEnvParams.each { k ->
    def v = System.getenv(k)
    if (v) {
        runtimeJvmArgs.add("-D${k}=${v}")
    }
}

/* *****************************************************************************
 Use the jlink plugin to build a dist with a JVM
 */
application {
    mainModule = "org.mbari.vars.query"
    mainClassName = "org.mbari.m3.vars.query.App"
    applicationDefaultJvmArgs = runtimeJvmArgs
}

jlink {
    imageZip = file("$buildDir/image-zip/vars-query.zip")
    options = [
            '--bind-services',
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
    ]

    addExtraDependencies("javafx", "slf4j-api")

    if(System.getenv("CI")) {
        ["win", "linux", "mac"].each { name ->
            targetPlatform(name) {
                jdkHome = System.getenv("JDK_HOME_${name.toUpperCase()}")
                addExtraModulePath(System.getenv("OPENJFX_MODS_${name.toUpperCase()}"))
            }
        }
    }

    launcher {
        name = 'VARS Query'
        jvmArgs = runtimeJvmArgs
    }

    jpackage {

        // jpackageHome = System.getenv("JPACKAGE_HOME")
        
        def customInstallerOptions = [
                "--copyright", "Monterey Bay Aquarium Research Institute",
                "--vendor", "org.mbari",
                "--app-version", project.version,
                "--name", "VARS Query",
        ]

        if  (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            installerType = "deb"
        }
        else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            jpackageHome = "C:\\Users\\brian\\Desktop\\jdk-14"
            installerType = "msi"
            customInstallerOptions.addAll([
                    "--win-menu",
                    "--win-menu-group", "VARS",
                    "--win-upgrade-uuid", "33afa428-3185-4d8f-bb8a-b2e6425aa0f7"
            ])

        }
        else {
            installerType = "dmg"
            customInstallerOptions.addAll([
                    "--mac-package-name", "VARS Query",
                    "--mac-package-identifier", project.name
            ])
            imageOptions = ["--icon", "src/jpackage/macos/VARS Query.icns"]
        }
        installerOptions = customInstallerOptions

    }

}

tasks.jpackageImage.doLast {
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        // copy {
        //     println("MACOSX: Adding VARS Query.icns")
        //     from "src/jpackage/macos"
        //     include "VARS Query.icns"
        //     into "build/jpackage/VARS Query.app/Contents/Resources"
        // }
        // exec {

        //     println("MACOSX: Stripping extended filesystem attributes from VARS Query.ap")

        //     workingDir "build/jpackage"

        //     commandLine "xattr", "-rc", "VARS Query.app/"
        // }
        def signer = System.getenv("MAC_CODE_SIGNER")
        if (signer) {
            // exec {
            //     println("MACOSX: Signing application")
            //     workingDir "build/jpackage"

            //     executable "codesign"

            //     args "--entitlements", "${projectDir}/src/jpackage/macos/java.entitlements",
            //       "--options", "runtime", "--deep", "-vvv", "-f", "--sign", signer, "-v",
            //       "VARS Query.app"

            //     println("MACOS: Manually sign the disk image with: `codesign --sign '${signer}' -v 'VARS Query-${project.version}.dmg'")
            // }
            // exec {
            //     println("MACOSX: Signing .dmg")
            //     workingDir "build/jpackage"

            //     executable "codesign"

            //     args "--entitlements", "${projectDir}/src/jpackage/macos/java.entitlements",
            //       "--options", "runtime", "--deep", "-vvv", "-f", "--sign", signer, 
            //       "VARS Query.app"
            // }
        }
    }
}