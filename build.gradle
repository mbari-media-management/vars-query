plugins {
  id 'application'
  id 'com.adarshr.test-logger' version '1.7.0' 
  id 'java'
  id 'org.beryx.jlink' version "2.14.0"
  id 'org.openjfx.javafxplugin' version "0.0.8"
  id "com.github.ben-manes.versions" version "0.22.0" 
  id "org.javamodularity.moduleplugin" version "1.5.0" 
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'http://dl.bintray.com/hohonuuli/maven'
    }
    maven {
        url 'http://dl.bintray.com/jerady/maven'
    }
}

dependencies {
  implementation 'com.fatboyindustrial.gson-javatime-serialisers:gson-javatime-serialisers:1.1.1'
  implementation 'com.google.code.gson:gson:2.8.5'
  implementation 'com.google.guava:guava:28.0-jre'
  implementation 'com.guigarage:sdkfx:0.2.2'
  implementation 'com.jfoenix:jfoenix:9.0.9'
  implementation 'com.squareup.okhttp3:logging-interceptor:3.14.2'
  implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
  implementation 'com.squareup.retrofit2:retrofit:2.6.1'
  implementation 'com.typesafe:config:1.3.4'
  implementation 'org.bushe:eventbus:1.4'
  implementation 'org.fxmisc.easybind:easybind:1.0.3'
  implementation 'org.mbari:mbarix4j:1.10.0'
  implementation 'org.mbari.vcr4j:vcr4j-core:4.0.2'
  implementation 'org.mbari.vcr4j:vcr4j-sharktopoda:4.0.2'
  implementation 'org.slf4j:slf4j-api:1.7.26'
  runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
  runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc:7.4.1.jre11'
  runtimeOnly 'javax.servlet:javax.servlet-api:4.0.1' // needed by logback
  testImplementation 'junit:junit:4.12'

    implementation('org.jfxtras:jfxtras-controls:10.0-r1') {
        exclude group: 'org.openjfx', module: 'javafx-base'
        exclude group: 'org.openjfx', module: 'javafx-controls'
        exclude group: 'org.openjfx', module: 'javafx-graphics'
        because("If not excluded we end up with both mac and linux javafx jars which cause jlink to fail")
    }

  implementation('org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.4') {
      exclude module: "javax.persistence"
  }
}

javafx {
    version = "11.0.2"
    modules = [
            'javafx.base',
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics'
    ]
}

def runtimeJvmArgs = [
        '-Xms1g',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=com.jfoenix',
        '--add-exports', 'javafx.base/com.sun.javafx.binding=com.jfoenix',
        '--add-exports', 'javafx.graphics/com.sun.javafx.stage=com.jfoenix',
        '--add-exports', 'javafx.base/com.sun.javafx.event=com.jfoenix'
]

def confEnvParams = [
  "ANNOSAURUS_JDBC_DRIVER",
  "ANNOSAURUS_JDBC_PASSWORD",
  "ANNOSAURUS_JDBC_URL",
  "ANNOSAURUS_JDBC_USER",
  "CONCEPT_SERVICE_TIMEOUT",
  "CONCEPT_SERVICE_URL",
  "SHARKTOPODA_PORT",
  "VARS_QUERY_ANNOTATION_START_DATE",
  "VARS_QUERY_FRAME_TITLE"
]
confEnvParams.each { k ->
    def v = System.getenv(k)
    if (v) {
        runtimeJvmArgs.add("-D${k}=${v}")
    }
}

/* *****************************************************************************
 Use the jlink plugin to build a dist with a JVM
 */
application {
    mainClassName = "org.mbari.vars.query/org.mbari.m3.vars.query.App"
    applicationDefaultJvmArgs = runtimeJvmArgs
}

jlink {
    imageZip = file("$buildDir/image-zip/vars-query.zip")
    options = [
            '--bind-services',
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
    ]

    addExtraDependencies("javafx")

    if(System.getenv("CI")) {
        ["win", "linux", "mac"].each { name ->
            targetPlatform(name) {
                jdkHome = System.getenv("JDK_HOME_${name.toUpperCase()}")
                addExtraModulePath(System.getenv("OPENJFX_MODS_${name.toUpperCase()}"))
            }
        }
    }

    launcher {
        name = 'VARS Query'
        jvmArgs = runtimeJvmArgs
    }

    jpackage {
        jpackageHome = System.getenv("JPACKAGE_HOME")

        def customInstallerOptions = [
                "--identifier", project.name,
                "--copyright", "Monterey Bay Aquarium Research Institute",
                "--vendor", "org.mbari"
        ]

        if  (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            installerType = "deb"
        }
        else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerType = "msi"
        }
        else {
            installerType = "dmg"
            customInstallerOptions.addAll([
                    "--mac-bundle-name", "VARS Query",
            ])
        }
        installerOptions = customInstallerOptions

    }

}